colnames(nutrient)=c("Calcium", "Iron", "Protein", "Vitamin A", "Vitamin C")
null_mu <- c(1000,15,60,800,75)
mu_mat <- cbind(null_mu,colMeans(nutrient))
colnames(mu_mat) <- c("Recommended Intake","Sample Mean")
mu_mat
var(nutrient)
n <- dim(nutrient)[1]
hotel <- n*t(colMeans(nutrient)-null_mu) %*%
solve(var(nutrient)) %*% (colMeans(nutrient)-null_mu)
hotel
m <- 5
alpha <- .01
f_stat <- (n-m)/(m*(n-1)) * hotel
f_stat
qf(1-alpha,df1=m,df2=n-m)
spouse <- read.table("spouse.txt")
n <- dim(spouse)[1]
spouse_diff <- spouse[,1:4] - spouse[,5:8]
colMeans(spouse_diff)
hotel <- n*t(colMeans(spouse_diff)) %*%
solve(var(spouse_diff)) %*% (colMeans(spouse_diff))
hotel
m <- 4
alpha <- .05
f_stat <- (n-m)/(m*(n-1)) * hotel
f_stat
qf(1-alpha,df1=m,df2=n-m)
z <- data.frame(spouse[,1]-spouse[,6],spouse[,2]-spouse[,5],
spouse[,3]-spouse[,8],spouse[,4]-spouse[,7])
colMeans(z)
hotel <- n*t(colMeans(z)) %*% solve(var(z)) %*% (colMeans(z))
hotel
m <- 4
alpha <- .05
f_stat <- (n-m)/(m*(n-1)) * hotel
f_stat
qf(1-alpha,df1=m,df2=n-m)
knitr::opts_knit$set(root.dir = 'C:/Users/neide/Documents/GitHub/ma189/Data')
swiss <- read.table("SBN.txt")
swiss[1:5,]
swiss[101:105,]
mu_mat <- cbind(colMeans(swiss[1:100,]),colMeans(swiss[101:200,]))
colnames(mu_mat) <- c("Genuine Sample Mean","Counterfeit Sample Mean")
mu_mat
var_genuine <- var(swiss[1:100,])
var_counterfeit <- var(swiss[101:200,])
var_genuine
var_counterfeit
n1 <- 100
n2 <- 100
var_weighted <- n1^{-1} * var_genuine + n2^{-1} * var_counterfeit
round(var_weighted,digits=6)
z <- swiss[1:100,] - swiss[101:200,]
hotel <- t(colMeans(z)) %*% solve(var_weighted) %*% (colMeans(z))
hotel
m <- 6
alpha <- .05
f_stat <- (n1+n2-m-1)/(m*(n1+n2-2)) * hotel
f_stat
qf(1-alpha,df1=m,df2=n1+n2-m-1)
library(Hotelling)
library(ICSNP)
X1 <- swiss[1:100,]
X2 <- swiss[101:200,]
colMeans(X1)
colMeans(X2)
S1 <- cov(X1)
S2 <- cov(X2)
# Package number one
hot_test <- hotelling.test(X1,X2)
hot_test
# Package number two
hot_test <- HotellingsT2(X1,X2)
hot_test
knitr::opts_knit$set(root.dir = 'C:/Users/neide/Documents/GitHub/ma189/Data')
pottery <- read.csv("RBPottery.csv")
colnames(pottery) <- c("No", "ID", "Kiln", "Al", "Fe", "Mg", "Ca", "Na", "K2O", "TiO2", "MnO", "BaO")
pot_llan <- pottery[pottery$Kiln==2,]
pot_cald <- pottery[pottery$Kiln==3,]
pot_is <- pottery[pottery$Kiln==4,]
pot_ar <- pottery[pottery$Kiln==5,]
pottery[c(23,37,39,44),4:8]
# Generate simulations
n <- 500
x1 <- cbind(matrix(rnorm(n*1,-0.5,2),n,1),
matrix(rnorm(n*1,0.5,2),n,1))
x2 <- cbind(matrix(rnorm(n*1,-2,1),n,1),
matrix(rnorm(n*1,2,1),n,1))
# Data visualization via histograms
hist(rbind(x1[,1],x1[,2]), breaks=20, xlim=c(-5,5),ylim=c(0,0.5),freq = F,
main="Histogram of Sample 1", xlab="", col=rgb(1,0,0,0.5))
hist(rbind(x2[,1],x2[,2]), breaks=20, xlim=c(-5,5),ylim=c(0,0.5),freq = F,
main="Histogram of Sample 2", xlab="", col=rgb(1,0,0,0.5))
nv <- c(n,n)
center_x1 <- x1 - matrix(colMeans(x1), nr=dim(x1)[1], nc=dim(x1)[2], byrow=TRUE)
center_x2 <- x2 - matrix(colMeans(x2), nr=dim(x2)[1], nc=dim(x2)[2], byrow=TRUE)
ESS1 <- sum(center_x1^2)
TSS1 <- nv%*%(colMeans(x1)-mean(x1))^2
ESS2 <- sum(center_x2^2)
TSS2 <- nv%*%(colMeans(x2)-mean(x2))^2
# Data visualization via histograms
hist(x1[,1], breaks=20, xlim=c(-5,5),ylim=c(0,0.5),freq = F,
main="Histogram of Sample 1", xlab="", col=rgb(1,0,0,0.5))
hist(x1[,2], breaks=20, col=rgb(0,0,1,0.5),freq = F, add=T )
abline(v = -0.5, col="red", lwd=2, lty=2)
abline(v = 0.5, col="red", lwd=2, lty=2)
hist(x2[,1], breaks=20, xlim=c(-5,5),ylim=c(0,0.5),freq = F,
main="Histogram of Sample 2", xlab="", col=rgb(1,0,0,0.5))
hist(x2[,2], breaks=20, col=rgb(0,0,1,0.5),freq = F, add=T)
abline(v = -1, col="red", lwd=2, lty=2)
abline(v = 1, col="red", lwd=2, lty=2)
pot <- NULL
pot <- rbind(pot,pot_llan)
pot <- rbind(pot,pot_cald)
pot <- rbind(pot,pot_is)
pot <- rbind(pot,pot_ar)
x <- pot$Al
n2 <- length(x[pot$Kiln == 2])
n3 <- length(x[pot$Kiln == 3])
n4 <- length(x[pot$Kiln == 4])
n5 <- length(x[pot$Kiln == 5])
N <- n2+n3+n4+n5
m2 <- mean(x[pot$Kiln == 2])
m3 <- mean(x[pot$Kiln == 3])
m4 <- mean(x[pot$Kiln == 4])
m5 <- mean(x[pot$Kiln == 5])
mg <- mean(x)
ESS1 <- sum((x[pot$Kiln == 2] - m2)^2) + sum((x[pot$Kiln == 3] - m3)^2) +
sum((x[pot$Kiln == 4] - m4)^2) + sum((x[pot$Kiln == 5] - m5)^2)
TSS1 <- n2*(m2-mg)^2 + n3*(m3-mg)^2 + n4*(m4-mg)^2 + n5*(m5-mg)^2
F1 <- TSS1/ESS1 * (N-4)/(4-1)
x <- pot$Fe
n2 <- length(x[pot$Kiln == 2])
n3 <- length(x[pot$Kiln == 3])
n4 <- length(x[pot$Kiln == 4])
n5 <- length(x[pot$Kiln == 5])
N <- n2+n3+n4+n5
m2 <- mean(x[pot$Kiln == 2])
m3 <- mean(x[pot$Kiln == 3])
m4 <- mean(x[pot$Kiln == 4])
m5 <- mean(x[pot$Kiln == 5])
mg <- mean(x)
ESS2 <- sum((x[pot$Kiln == 2] - m2)^2) + sum((x[pot$Kiln == 3] - m3)^2) +
sum((x[pot$Kiln == 4] - m4)^2) + sum((x[pot$Kiln == 5] - m5)^2)
TSS2 <- n2*(m2-mg)^2 + n3*(m3-mg)^2 + n4*(m4-mg)^2 + n5*(m5-mg)^2
F2 <- TSS2/ESS2 * (N-4)/(4-1)
x <- pot$Mg
n2 <- length(x[pot$Kiln == 2])
n3 <- length(x[pot$Kiln == 3])
n4 <- length(x[pot$Kiln == 4])
n5 <- length(x[pot$Kiln == 5])
N <- n2+n3+n4+n5
m2 <- mean(x[pot$Kiln == 2])
m3 <- mean(x[pot$Kiln == 3])
m4 <- mean(x[pot$Kiln == 4])
m5 <- mean(x[pot$Kiln == 5])
mg <- mean(x)
ESS3 <- sum((x[pot$Kiln == 2] - m2)^2) + sum((x[pot$Kiln == 3] - m3)^2) +
sum((x[pot$Kiln == 4] - m4)^2) + sum((x[pot$Kiln == 5] - m5)^2)
TSS3 <- n2*(m2-mg)^2 + n3*(m3-mg)^2 + n4*(m4-mg)^2 + n5*(m5-mg)^2
F3 <- TSS3/ESS3 * (N-4)/(4-1)
x <- pot$Ca
n2 <- length(x[pot$Kiln == 2])
n3 <- length(x[pot$Kiln == 3])
n4 <- length(x[pot$Kiln == 4])
n5 <- length(x[pot$Kiln == 5])
N <- n2+n3+n4+n5
m2 <- mean(x[pot$Kiln == 2])
m3 <- mean(x[pot$Kiln == 3])
m4 <- mean(x[pot$Kiln == 4])
m5 <- mean(x[pot$Kiln == 5])
mg <- mean(x)
ESS4 <- sum((x[pot$Kiln == 2] - m2)^2) + sum((x[pot$Kiln == 3] - m3)^2) +
sum((x[pot$Kiln == 4] - m4)^2) + sum((x[pot$Kiln == 5] - m5)^2)
TSS4 <- n2*(m2-mg)^2 + n3*(m3-mg)^2 + n4*(m4-mg)^2 + n5*(m5-mg)^2
F4 <- TSS4/ESS4 * (N-4)/(4-1)
x <- pot$Na
n2 <- length(x[pot$Kiln == 2])
n3 <- length(x[pot$Kiln == 3])
n4 <- length(x[pot$Kiln == 4])
n5 <- length(x[pot$Kiln == 5])
N <- n2+n3+n4+n5
m2 <- mean(x[pot$Kiln == 2])
m3 <- mean(x[pot$Kiln == 3])
m4 <- mean(x[pot$Kiln == 4])
m5 <- mean(x[pot$Kiln == 5])
mg <- mean(x)
ESS5 <- sum((x[pot$Kiln == 2] - m2)^2) + sum((x[pot$Kiln == 3] - m3)^2) +
sum((x[pot$Kiln == 4] - m4)^2) + sum((x[pot$Kiln == 5] - m5)^2)
TSS5 <- n2*(m2-mg)^2 + n3*(m3-mg)^2 + n4*(m4-mg)^2 + n5*(m5-mg)^2
F5 <- TSS5/ESS5 * (N-4)/(4-1)
#setwd("C:\\Users\\neide\\Documents\\Research\\SpecEstLM")
setwd("C:\\Users\\neide\\OneDrive\\Documents\\Research\\SpecEstLM")
## load files
source("spec.taper.r")
source("taper.flat.r")
source("parzen.taper.r")
source("parzen.window.r")
source("spec.arma.r")
source("spec.exp.r")
source("spec.local.r")
source("delta.optimal.r")
source("spec.global.r")
source("ma.bandwidth.r")
source("parzen.consts.r")
source("bandwidth.quadkernel.r")
source("ARMAauto.r")
source("polymult.r")
## load data
gdp <- read.csv(file="GDP.csv")
setwd("C:\\Users\\neide\\OneDrive\\Documents\\Research\\SpecEstLM\\Numerical")
## Process 1: ARMA
phis <- c( -.9, -.5, 0, .5, .9)
## Process 1: ARMA
phis <- c( -.9, -.5, 0, .5, .9)
thetas <- c(-.8, -.4, 0, .4, .8)
j <- 1
h <- 3
phi <- phis[j]
theta <- thetas[h]
gamma <- ARMAauto(phi,theta,1000)
spec.true <- spec.arma(phi,theta,1,2)
## settings
Monte <- 10^4
T <- 800
c <- .5
parzen.const <- parzen.consts(10000)
delta.range <- seq(1,50)/200
## process calculations
gamma.mat <- t(chol(toeplitz(gamma[1:T])))
delta.opt <- delta.optimal(gamma,T)
delta.opt0 <- delta.opt[1]
delta.optpi <- delta.opt[2]
## simulation
spec.ests0 <- NULL
spec.estspi <- NULL
for(i in 1:Monte)
{
x.sim <- gamma.mat %*% rnorm(T)
M <- min(T,max(1,ma.bandwidth(x.sim,.05,4)/c))
gamma.hat <- acf(x.sim,type="covariance",plot=FALSE,lag.max=T-1)$acf
gamma.hat <- gamma.hat*apply(array(seq(0,T-1)/M,c(1,1,T)),3,function(x){taper.flat(x,c)})
delta.hat <- delta.optimal(gamma.hat,T)
delta.hat0 <- delta.hat[1]
delta.hatpi <- delta.hat[2]
parzen.band <- bandwidth.quadkernel(gamma.hat,T,parzen.const[1],parzen.const[2])
parzen.band0 <- parzen.band[1]
parzen.bandpi <- parzen.band[2]
# Parzen estimate
spec.est0 <- spec.taper(x.sim,parzen.taper,parzen.band0,T,TRUE)[T/2]
# Flat-top estimate
spec.est0 <- c(spec.est0,
spec.taper(x.sim,function(x){taper.flat(x,c)},M,T,TRUE)[T/2])
# Local quadratic at estimated delta
spec.est0 <- c(spec.est0,
spec.local(x.sim,delta.hat0,0,T,TRUE,FALSE)[[2]][T/2])
# Local quadratic at theoretical delta
spec.est0 <- c(spec.est0,
spec.local(x.sim,delta.opt0,0,T,TRUE,FALSE)[[2]][T/2])
# Local quadratic at range of delta
for(k in 1:length(delta.range))
{
spec.est0 <- c(spec.est0,
spec.local(x.sim,delta.range[k],0,T,TRUE,FALSE)[[2]][T/2])
}
# Local positive quadratic at estimated delta
spec.est0 <- c(spec.est0,
spec.local(x.sim,delta.hat0,0,T,TRUE,TRUE)[[2]][T/2])
# Local positive quadratic at theoretical delta
spec.est0 <- c(spec.est0,
spec.local(x.sim,delta.opt0,0,T,TRUE,TRUE)[[2]][T/2])
# Local positive quadratic at range of delta
for(k in 1:length(delta.range))
{
spec.est0 <- c(spec.est0,
spec.local(x.sim,delta.range[k],0,T,TRUE,TRUE)[[2]][T/2])
}
# Parzen estimate
spec.estpi <- spec.taper(x.sim,parzen.taper,parzen.bandpi,T,TRUE)[T]
# Flat-top estimate
spec.estpi <- c(spec.estpi,
spec.taper(x.sim,function(x){taper.flat(x,c)},M,T,TRUE)[T])
# Local quadratic at estimated delta
spec.estpi <- c(spec.estpi,
spec.local(x.sim,delta.hatpi,pi,T,TRUE,FALSE)[[2]][T])
# Local quadratic at theoretical delta
spec.estpi <- c(spec.estpi,
spec.local(x.sim,delta.optpi,pi,T,TRUE,FALSE)[[2]][T])
# Local quadratic at range of delta
for(k in 1:length(delta.range))
{
spec.estpi <- c(spec.estpi,
spec.local(x.sim,delta.range[k],pi,T,TRUE,FALSE)[[2]][T])
}
# Local positive quadratic at estimated delta
spec.estpi <- c(spec.estpi,
spec.local(x.sim,delta.hatpi,pi,T,TRUE,TRUE)[[2]][T])
# Local positive quadratic at theoretical delta
spec.estpi <- c(spec.estpi,
spec.local(x.sim,delta.optpi,pi,T,TRUE,TRUE)[[2]][T])
# Local positive quadratic at range of delta
for(k in 1:length(delta.range))
{
spec.estpi <- c(spec.estpi,
spec.local(x.sim,delta.range[k],pi,T,TRUE,TRUE)[[2]][T])
}
spec.ests0 <- rbind(spec.ests0,spec.est0)
spec.estspi <- rbind(spec.estspi,spec.estpi)
if(i %% 1000 == 0) { print(i) }
}
## Process 1: ARMA
phis <- c( -.9, -.5, 0, .5, .9)
thetas <- c(-.8, -.4, 0, .4, .8)
j <- 1
h <- 1
phi <- phis[j]
theta <- thetas[h]
gamma <- ARMAauto(phi,theta,1000)
spec.true <- spec.arma(phi,theta,1,2)
## process calculations
gamma.mat <- t(chol(toeplitz(gamma[1:T])))
delta.opt <- delta.optimal(gamma,T)
delta.opt0 <- delta.opt[1]
delta.optpi <- delta.opt[2]
## simulation
spec.ests0 <- NULL
spec.estspi <- NULL
for(i in 1:Monte)
{
x.sim <- gamma.mat %*% rnorm(T)
M <- min(T,max(1,ma.bandwidth(x.sim,.05,4)/c))
gamma.hat <- acf(x.sim,type="covariance",plot=FALSE,lag.max=T-1)$acf
gamma.hat <- gamma.hat*apply(array(seq(0,T-1)/M,c(1,1,T)),3,function(x){taper.flat(x,c)})
delta.hat <- delta.optimal(gamma.hat,T)
delta.hat0 <- delta.hat[1]
delta.hatpi <- delta.hat[2]
parzen.band <- bandwidth.quadkernel(gamma.hat,T,parzen.const[1],parzen.const[2])
parzen.band0 <- parzen.band[1]
parzen.bandpi <- parzen.band[2]
# Parzen estimate
spec.est0 <- spec.taper(x.sim,parzen.taper,parzen.band0,T,TRUE)[T/2]
# Flat-top estimate
spec.est0 <- c(spec.est0,
spec.taper(x.sim,function(x){taper.flat(x,c)},M,T,TRUE)[T/2])
# Local quadratic at estimated delta
spec.est0 <- c(spec.est0,
spec.local(x.sim,delta.hat0,0,T,TRUE,FALSE)[[2]][T/2])
# Local quadratic at theoretical delta
spec.est0 <- c(spec.est0,
spec.local(x.sim,delta.opt0,0,T,TRUE,FALSE)[[2]][T/2])
# Local quadratic at range of delta
for(k in 1:length(delta.range))
{
spec.est0 <- c(spec.est0,
spec.local(x.sim,delta.range[k],0,T,TRUE,FALSE)[[2]][T/2])
}
# Local positive quadratic at estimated delta
spec.est0 <- c(spec.est0,
spec.local(x.sim,delta.hat0,0,T,TRUE,TRUE)[[2]][T/2])
# Local positive quadratic at theoretical delta
spec.est0 <- c(spec.est0,
spec.local(x.sim,delta.opt0,0,T,TRUE,TRUE)[[2]][T/2])
# Local positive quadratic at range of delta
for(k in 1:length(delta.range))
{
spec.est0 <- c(spec.est0,
spec.local(x.sim,delta.range[k],0,T,TRUE,TRUE)[[2]][T/2])
}
# Parzen estimate
spec.estpi <- spec.taper(x.sim,parzen.taper,parzen.bandpi,T,TRUE)[T]
# Flat-top estimate
spec.estpi <- c(spec.estpi,
spec.taper(x.sim,function(x){taper.flat(x,c)},M,T,TRUE)[T])
# Local quadratic at estimated delta
spec.estpi <- c(spec.estpi,
spec.local(x.sim,delta.hatpi,pi,T,TRUE,FALSE)[[2]][T])
# Local quadratic at theoretical delta
spec.estpi <- c(spec.estpi,
spec.local(x.sim,delta.optpi,pi,T,TRUE,FALSE)[[2]][T])
# Local quadratic at range of delta
for(k in 1:length(delta.range))
{
spec.estpi <- c(spec.estpi,
spec.local(x.sim,delta.range[k],pi,T,TRUE,FALSE)[[2]][T])
}
# Local positive quadratic at estimated delta
spec.estpi <- c(spec.estpi,
spec.local(x.sim,delta.hatpi,pi,T,TRUE,TRUE)[[2]][T])
# Local positive quadratic at theoretical delta
spec.estpi <- c(spec.estpi,
spec.local(x.sim,delta.optpi,pi,T,TRUE,TRUE)[[2]][T])
# Local positive quadratic at range of delta
for(k in 1:length(delta.range))
{
spec.estpi <- c(spec.estpi,
spec.local(x.sim,delta.range[k],pi,T,TRUE,TRUE)[[2]][T])
}
spec.ests0 <- rbind(spec.ests0,spec.est0)
spec.estspi <- rbind(spec.estspi,spec.estpi)
if(i %% 1000 == 0) { print(i) }
}
bias.0 <- colMeans(spec.ests0 - spec.true[1])
var.0 <- sqrt(rowMeans((t(spec.ests0) - colMeans(spec.ests0))^2))
rmse.0 <- sqrt(bias.0^2 + var.0^2)
round(cbind(bias.0,var.0,rmse.0),digits=3)
bias.pi <- colMeans(spec.estspi - spec.true[2])
var.pi <- sqrt(rowMeans((t(spec.estspi) - colMeans(spec.estspi))^2))
rmse.pi <- sqrt(bias.pi^2 + var.pi^2)
round(cbind(bias.pi,var.pi,rmse.pi),digits=3)
write(t(cbind(round(cbind(bias.0,var.0,rmse.0),digits=3),
round(cbind(bias.pi,var.pi,rmse.pi),digits=3))),file="dgpARMA11T800.dat",ncol=6)
setwd("C:\\Users\\neide\\Documents\\GitHub\\ma189\\Data")
cars <- read.csv("mtcars.csv")
head(cars)
dim(cars)
cars
car$wt
cars$wt
car$mpg
cars$mpg
cars6 <- cars[cars$cyl==6,]
cars8 <- cars[cars$cyl==8,]
cars4 <- cars[cars$cyl==4,]
colMeans(cars6[,c(1,6)])
colMeans(cars6[,c(2,6)])
colMeans(cars6[,c(2,7)])
colMeans(cars8[,c(2,7)])
colMeans(cars4[,c(2,7)])
cor(cars4[,c(2,7)])
cor(cars6[,c(2,7)])
cor(cars8[,c(2,7)])
library("HSAUR3")
manova.pot <- summary(manova(cbind(pot$Al,pot$Fe,pot$Mg,pot$Ca,pot$Na) ~ pot$Kiln))
summary.aov(manova.pot)  # univariate ANOVA tables
summary(manova.pot,test='Roy') # MANOVA table of "Roy's method"
names(manova.pot,test='Roy') # MANOVA table of "Roy's method"
names(summary(manova.pot,test='Roy'))
summary(manova.pot,test='Hotelling-Lawley')
#manova.pot <- summary(manova(cbind(pot$Al,pot$Fe,pot$Mg,pot$Ca,pot$Na) ~ pot$Kiln))
#summary.aov(manova.pot)  # univariate ANOVA tables
manova.pot <- manova( cbind(Al,Fe,Mg,Ca,Na) ~ Klin, data = pot)
#manova.pot <- summary(manova(cbind(pot$Al,pot$Fe,pot$Mg,pot$Ca,pot$Na) ~ pot$Kiln))
#summary.aov(manova.pot)  # univariate ANOVA tables
manova.pot <- manova( cbind(Al,Fe,Mg,Ca,Na) ~ Kiln, data = pot)
summary(manova.pot,test='Roy') # MANOVA table of "Roy's method"
pot
wilks <- det(ESS)/det(ESS + HSS)
pottery <- read.csv("RBPottery.csv")
knitr::opts_knit$set(root.dir = 'C:/Users/neide/Documents/GitHub/ma189/Data')
pottery <- read.csv("RBPottery.csv")
colnames(pottery) <- c("No", "ID", "Kiln", "Al", "Fe", "Mg", "Ca", "Na", "K2O", "TiO2", "MnO", "BaO")
pot_llan <- pottery[pottery$Kiln==2,]
pot_cald <- pottery[pottery$Kiln==3,]
pot_is <- pottery[pottery$Kiln==4,]
pot_ar <- pottery[pottery$Kiln==5,]
pot <- NULL
pot <- rbind(pot,pot_llan)
pot <- rbind(pot,pot_cald)
pot <- rbind(pot,pot_is)
pot <- rbind(pot,pot_ar)
# Group: kiln 2
x2 <- pot[pot$Kiln==2,4:8]
m2 <- colMeans(x2)
n2 <- dim(x2)[1]
# Group: kiln 3
x3 <- pot[pot$Kiln==3,4:8]
m3 <- colMeans(x3)
n3 <- dim(x3)[1]
# Group: kiln 4
x4 <- pot[pot$Kiln==4,4:8]
m4 <- colMeans(x4)
n4 <- dim(x4)[1]
# Group: kiln 5
x5 <- pot[pot$Kiln==5,4:8]
m5 <- colMeans(x5)
n5 <- dim(x5)[1]
# Grand Mean
mg <- (m2*n2 + m3*n3 + m4*n4 + m5*n5)/(n2+n3+n4+n5)
ESS <- cov(x2)*(n2-1) + cov(x3)*(n3-1) + cov(x4)*(n4-1) + cov(x5)*(n5-1)
ESS
HSS <- n2*(m2 - mg) %*% t(m2 - mg) + n3*(m3 - mg) %*% t(m3 - mg) +
n4*(m4 - mg) %*% t(m4 - mg) + n5*(m5 - mg) %*% t(m5 - mg)
HSS
wilks <- det(ESS)/det(ESS + HSS)
pillai <- sum(diag(HSS %*% solve(ESS + HSS)))
hotel <- sum(diag(HSS %*% solve(ESS)))
roy <- max(eigen(HSS %*% solve(ESS))$values)
#manova.pot <- summary(manova(cbind(pot$Al,pot$Fe,pot$Mg,pot$Ca,pot$Na) ~ pot$Kiln))
library("HSAUR3")
#manova.pot <- summary(manova(cbind(pot$Al,pot$Fe,pot$Mg,pot$Ca,pot$Na) ~ pot$Kiln))
#summary.aov(manova.pot)  # univariate ANOVA tables
manova.pot <- manova( cbind(Al,Fe,Mg,Ca,Na) ~ Kiln, data = pot)
summary(manova.pot,test='Roy') # MANOVA table of "Roy's method"
summary(manova.pot,test='Hotelling-Lawley')
names(manova.pot)
manova.pot$coefficients
manova.pot$residuals
manova.pot$effects
manova.pot$terms
manova.pot$model
names(manova.pot)
manova.pot$assign
manova.pot$qr
manova.pot$xlevels
manova.pot$call
names(manova.pot)
manova.pot$df.residual
SSCP.fn(manova.pot)
install.packages("HoRM")
SSCP.fn(manova.pot)
library("HoRM")
SSCP.fn(manova.pot)
